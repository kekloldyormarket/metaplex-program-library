/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from "@solana/spl-token";
import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";
import { UpdatingArgs, updatingArgsBeet } from "../types/UpdatingArgs";

/**
 * @category Instructions
 * @category ProcessSignMetadata
 * @category generated
 */
export type ProcessSignMetadataInstructionArgs = {
  args: UpdatingArgs;
};
/**
 * @category Instructions
 * @category ProcessSignMetadata
 * @category generated
 */
const processSignMetadataStruct = new beet.FixableBeetArgsStruct<
  ProcessSignMetadataInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["instructionDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["args", updatingArgsBeet],
  ],
  "ProcessSignMetadataInstructionArgs"
);
/**
 * Accounts required by the _processSignMetadata_ instruction
 * @category Instructions
 * @category ProcessSignMetadata
 * @category generated
 */
export type ProcessSignMetadataInstructionAccounts = {
  authority: web3.PublicKey;
  fanout: web3.PublicKey;
  holdingAccount: web3.PublicKey;
  sourceAccount: web3.PublicKey;
  tokenAccount: web3.PublicKey;
  tokenAccount2: web3.PublicKey;
  metadata: web3.PublicKey;
  tokenMetadataProgram: web3.PublicKey;
};

const processSignMetadataInstructionDiscriminator = [
  188, 67, 163, 49, 0, 150, 63, 89,
];

/**
 * Creates a _ProcessSignMetadata_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ProcessSignMetadata
 * @category generated
 */
export function createProcessSignMetadataInstruction(
  accounts: ProcessSignMetadataInstructionAccounts,
  args: ProcessSignMetadataInstructionArgs
) {
  const {
    authority,
    fanout,
    holdingAccount,
    sourceAccount,
    tokenAccount,
    tokenAccount2,
    metadata,
    tokenMetadataProgram,
  } = accounts;
console.log({
    instructionDiscriminator: processSignMetadataInstructionDiscriminator,
    ...args,
})
console.log(processSignMetadataStruct.serialize({
  instructionDiscriminator: processSignMetadataInstructionDiscriminator,
  ...args,
}, 10000))
  const [data] = processSignMetadataStruct.serialize({
    instructionDiscriminator: processSignMetadataInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: authority,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: fanout,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: holdingAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: sourceAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: tokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: tokenAccount2,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: metadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: tokenMetadataProgram,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      "5F6oQHdPrQBLdENyhWUAE4mCUN13ZewVxi5yBnZFb9LW"
    ),
    keys,
    data,
  });
  return ix;
}
