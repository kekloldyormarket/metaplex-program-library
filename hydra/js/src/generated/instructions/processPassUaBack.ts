/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";
import { UpdatingArgs, updatingArgsBeet } from "../types/UpdatingArgs";

/**
 * @category Instructions
 * @category ProcessPassUaBack
 * @category generated
 */
export type ProcessPassUaBackInstructionArgs = {
  args: UpdatingArgs;
};
/**
 * @category Instructions
 * @category ProcessPassUaBack
 * @category generated
 */
const processPassUaBackStruct = new beet.FixableBeetArgsStruct<
  ProcessPassUaBackInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["instructionDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["args", updatingArgsBeet],
  ],
  "ProcessPassUaBackInstructionArgs"
);
/**
 * Accounts required by the _processPassUaBack_ instruction
 * @category Instructions
 * @category ProcessPassUaBack
 * @category generated
 */
export type ProcessPassUaBackInstructionAccounts = {
  authority: web3.PublicKey;
  fanout: web3.PublicKey;
  holdingAccount: web3.PublicKey;
  metadata: web3.PublicKey;
  tokenMetadataProgram: web3.PublicKey;
};

const processPassUaBackInstructionDiscriminator = [
  180, 66, 26, 192, 55, 23, 178, 235,
];

/**
 * Creates a _ProcessPassUaBack_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ProcessPassUaBack
 * @category generated
 */
export function createProcessPassUaBackInstruction(
  accounts: ProcessPassUaBackInstructionAccounts,
  args: ProcessPassUaBackInstructionArgs
) {
  const { authority, fanout, holdingAccount, metadata, tokenMetadataProgram } =
    accounts;

  const [data] = processPassUaBackStruct.serialize({
    instructionDiscriminator: processPassUaBackInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: authority,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: fanout,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: holdingAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: metadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: tokenMetadataProgram,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      "5F6oQHdPrQBLdENyhWUAE4mCUN13ZewVxi5yBnZFb9LW"
    ),
    keys,
    data,
  });
  return ix;
}
