/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from "@solana/web3.js";
import * as beetSolana from "@metaplex-foundation/beet-solana";
import * as beet from "@metaplex-foundation/beet";

/**
 * Arguments used to create {@link Creator}
 * @category Accounts
 * @category generated
 */
export type CreatorArgs = {
  address: web3.PublicKey;
  verified: boolean;
  share: number;
};

const creatorDiscriminator = [237, 37, 233, 153, 165, 132, 54, 103];
/**
 * Holds the data for the {@link Creator} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Creator implements CreatorArgs {
  private constructor(
    readonly address: web3.PublicKey,
    readonly verified: boolean,
    readonly share: number
  ) {}

  /**
   * Creates a {@link Creator} instance from the provided args.
   */
  static fromArgs(args: CreatorArgs) {
    return new Creator(args.address, args.verified, args.share);
  }

  /**
   * Deserializes the {@link Creator} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Creator, number] {
    return Creator.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Creator} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey
  ): Promise<Creator> {
    const accountInfo = await connection.getAccountInfo(address);
    if (accountInfo == null) {
      throw new Error(`Unable to find Creator account at ${address}`);
    }
    return Creator.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Deserializes the {@link Creator} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Creator, number] {
    return creatorBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link Creator} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return creatorBeet.serialize({
      accountDiscriminator: creatorDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Creator}
   */
  static get byteSize() {
    return creatorBeet.byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Creator} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Creator.byteSize,
      commitment
    );
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link Creator} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === Creator.byteSize;
  }

  /**
   * Returns a readable version of {@link Creator} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      address: this.address.toBase58(),
      verified: this.verified,
      share: this.share,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const creatorBeet = new beet.BeetStruct<
  Creator,
  CreatorArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["accountDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["address", beetSolana.publicKey],
    ["verified", beet.bool],
    ["share", beet.u8],
  ],
  Creator.fromArgs,
  "Creator"
);
